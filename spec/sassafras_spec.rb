require File.dirname(__FILE__) + '/spec_helper.rb'

describe Sassafras do

  describe Sassafras::Theme do 

    describe "when creating a basic color scheme" do
   
      before :each do
        @sassafras = Sassafras::Theme.basic(:red)
      end

      def red_values
        {
          'lightest' => '#ffe6e6',
          'lighter'  => '#ffb3b3',
          'light'    => '#ff8080',
          'mid'      => '#ff0000',
          'dark'     => '#800000',
          'darker'   => '#4d0000',
          'darkest'  => '#1a0000'
        }
      end

      it "sets the base color" do
        @sassafras.base.should == "#ff0000"
      end

      it "generates the base tints and shades" do
        red_values.each do |name, hex|
          @sassafras.colors(:base).should have_key(name)
          @sassafras.colors(:base)[name].should == hex
        end
      end

      it "generates the correct SASS output" do
        sass = <<SASS
# Color scheme generated by Sassafras
# http://github.com/teejayvanslyke/sassafras/
# ================= base ====================
!base_lightest      = #ffe6e6
!base_lighter       = #ffb3b3
!base_light         = #ff8080
!base_mid           = #ff0000
!base_dark          = #800000
!base_darker        = #4d0000
!base_darkest       = #1a0000
SASS
        pending "..."
        @sassafras.sass.should == sass
      end

      it "only has one color set" do
        @sassafras.colors.size.should == 1
      end
    end


    describe "when generating Sass output" do
      
      before :each do
        @sassafras = Sassafras::Theme.basic(:red)
      end
      
      it "outputs the base color" do
        @sassafras.sass.should include("!base_mid = #ff0000")
      end

    end

  end

  describe "when generating color sets for a new type of theme" do

    class TestTheme < Sassafras::Theme

      color 'minus_five', -5
      color 'one',        +1
      color 'two',        +2
      color 'three',      +3

    end

    before :each do 
      @theme = TestTheme.new(:red)
    end

    def self.it_has_color(name, steps)
      it "has all variations of the #{name} color" do
        %w(lightest lighter light mid dark darker darkest).each do |variation|
          @theme.colors(name).should have_key(variation)
        end
      end
    end

    it_has_color('minus_five', -5)
    it_has_color('one',        +1)
    it_has_color('two',        +2)
    it_has_color('three',      +3)

  end



  describe Sassafras::Tints do

    before :each do 
      @tints = Sassafras::Tints.new(Color::RGB::Red)
    end

    describe "accessing tints" do

      it "has a base tint" do
        @tints.mid.should == '#ff0000'
      end

      it "has a light tint" do
        @tints.light.should == '#ff8080'
      end

      it "has a lighter tint" do
        @tints.lighter.should == '#ffb3b3'
      end

      it "has a lightest tint" do
        @tints.lightest.should == '#ffe6e6'
      end

    end

    describe "when generating Sass output" do

      it "outputs five levels of tints" do
      end
    end

    describe "when generating colors with a prefixed name" do
      before :each do 
        @tints = Sassafras::Tints.new(Color::RGB::Red, 'foo')
      end

      it "prefixes all of the colors with the specified prefix" do
        @tints.colors.should have_key('foo_mid')
        @tints.colors.should have_key('foo_light')
        @tints.colors.should have_key('foo_lighter')
        @tints.colors.should have_key('foo_lightest')
      end
    end

  end

  describe Sassafras::Shades do

    before :each do 
      @shades = Sassafras::Shades.new(Color::RGB::Red)
    end

    describe "accessing shades" do

      it "has a base shade" do
        @shades.mid.should == '#ff0000'
      end

      it "has a dark shade" do
        @shades.dark.should == '#800000'
      end

      it "has a darker shade" do
        @shades.darker.should == '#4d0000'
      end

      it "has a darkest shade" do
        @shades.darkest.should == '#1a0000'
      end
    end

    describe "when generating colors with a prefixed name" do
      before :each do 
        @shades = Sassafras::Shades.new(Color::RGB::Red, 'foo')
      end

      it "prefixes all of the colors with the specified prefix" do
        @shades.colors.should have_key('foo_mid')
        @shades.colors.should have_key('foo_dark')
        @shades.colors.should have_key('foo_darker')
        @shades.colors.should have_key('foo_darkest')
      end
    end
  end

end

